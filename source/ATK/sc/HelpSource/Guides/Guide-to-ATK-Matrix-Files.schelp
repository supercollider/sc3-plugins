title:: Guide to ATK Matrix Files
summary:: A guide to reading, writing, and storing ATK matrices.
categories:: Libraries>Ambisonic Toolkit


SECTION:: Directory Structure

The ATK store assets in its Application Support directory:
code::
Atk.userSupportDir
::
This includes three default directories:
list::
##strong::kernels:: (FIR filters for kernel en/decoders),
##strong::sounds:: (example sound files in A-format, B-format, &c.),
##strong::matrices:: (for encoding, decoding, xforming).
::
These folders store the files shipped with the ATK.
You can also optionally add your own code::extensions:: folder,
in which you can store kernels and matrices of your own design.
Note this is different from SuperCollider's code::Extensions:: folder.
If you haven't yet added an code::extensions:: directory, you can see where
to put it by executing the following method:
code::
Atk.userExtensionsDir         // view it
Atk.userExtensionsDir.openOS  // open it... if it exists!
::

There's a handy method that will build it for you in the expected structure:
code::
Atk.createExtensionsDir
::

This will create a directory structure that lives in your next to your default
ATK assets. Note this creates both a strong::matrices:: folder structure,
and an identical strong::kernels:: folder structure for storing your custom kernels.
The full structure will look like this:
tree::
  ## teletype::Application Support::
  tree::
    ## teletype::ATK::
    tree::
      ## teletype::kernels::  (ATK default)
      ## teletype::matrices::  (ATK default)
      ## teletype::sounds::  (ATK default)
      ## teletype::extensions::  (your custom additions)
      tree::
        ## teletype::kernels::
        ## teletype::matrices::
        tree::
          ##teletype::FOA::
          tree::
            ##teletype::decoders::
            tree::
              ##myDecoderMatrix.txt
              ##myDecoderMatrixForReaper.mosl.txt
              ##myDecoderMatrixWithMetadata.yml
            ::
            ##teletype::encoders::
            ##teletype::xformers::
          ::
          ##teletype::HOA1::
          ##teletype::HOA2::
          ##teletype::...::
          ##teletype::HOAN::
        ::
      ::
    ::
  ::
::
Each of the folders (code::FOA>encoders::, code::HOA5>decoders::, etc.) are
empty and ready to store matrices (and kernels) for use with the ATK-SC3 (this package)
and link::http://www.ambisonictoolkit.net/download/reaper/##ATK-Reaper:: (more
on that later). When you write a matrix using the ATK, it
will store it in this directory structure by default, and will look here by
default when asked to read in a matrix from file.

You can view this structure and any files you've stored there using the following method:
code::
Atk.postMyMatrices();                    // All sets, all matrices types
Atk.postMyMatrices('FOA');               // FOA matrices hierarchy
Atk.postMyMatrices('FOA', 'encoders');	// FOA encoders only
Atk.postMyMatrices('FOA', 'decoders');	// FOA decoders only
Atk.postMyMatrices('FOA', 'xformers');	// FOA xformers only
::

Each of these matrix subdirectories can have further subdirectories at your
discretion, e.g. for particular projects or categories of matrices.

SECTION::Writing Matrices

We'll start by writing a matrix file.

Let's create a first order A-format encoding matrix from a nine-point
link::https://en.wikipedia.org/wiki/Spherical_design##spherical t-design::. For
our purposes, we'll use a spherical designs with emphasis::d:: = 2, giving a
collection of uniformly distributed points on a sphere.
The t-design we're using below can be found in Hardin and Sloan's
link::http://neilsloane.com/sphdesigns/dim3##Library of 3-D Designs::.
footnote::Hardin, R. H. and Sloane, N. J. A., "Sperical Designs", http://neilsloane.com/sphdesigns/, accessed on July 29, 2016.::

code::
(
// Spherical coordinates of the nine-point t-design.
~directions = [
	[ 0, 45 ],  [ 120, 45 ],  [ -120, 45 ],
	[ 0, 0 ],   [ 120, 0 ],   [ -120, 0 ],
	[ 0, -45 ], [ 120, -45 ], [ -120, -45 ]
].degrad;

// Here's our 9-point A-format to B-format (planewave, aka velocity) encoder:
~encoder = FoaEncoderMatrix.newDirections(~directions);
)
::

This link::Classes/FoaEncoderMatrix:: is now ready to be used for encoding
planewaves arriving from those nine uniformly distributed incidences. Within
the ATK's classification hierarchy, code::~encoder:: looks like this:

table::
    ## strong::set:: || strong::type:: || strong::op:: || strong::kind::
    ## code::'FOA':: || code::'encoder':: || code::'matrix':: || code::'dirs'::
::

For fun, let's inspect:

code::
(
var methodsToInspect = ['class', 'set', 'type', 'op', 'kind' ];

methodsToInspect.do({arg item; (item.asString ++ " : " ++ ~encoder.perform(item)).postln;})
)
::


After all that hard work (thanks ATK!), we want to store the result to a file for
use in the future, and to use in
link::http://www.ambisonictoolkit.net/download/reaper/##ATK-Reaper:: plugins!
footnote::ATK-Reaper will support matrix loading in an upcoming release.::

There are three available file formats, each with a special purpose:

list::
##code::.txt:: : the most basic text file, writing the raw matrix only.
##code::.yml:: : store the matrix along with metadata in a human readable format.
##code::.mosl.txt:: : a text file formatted for use with ATK-Reaper JSFX-plugins.
::

Let's write this encoder matrix out in all three formats:

code::
// .txt extension writes the matrix only
~encoder.writeToFile("my9PointEncoder.txt");

// .yml writes metadata as well
~encoder.writeToFile("my9PointEncoder.yml");

// .mosl.txt writes matrix only, single lines for Reaper to read
~encoder.writeToFile("my9PointEncoder.mosl.txt");
::

Because we only specified a file name, not a full path,
the ATK will store the matrix in the default location.
As we're writing an link::Classes/FoaEncoderMatrix::, ATK can infer that
it's an strong::encoder:: in the strong::FOA:: set. (We also know, we're dealing
with a strong::matrix:: operation.)
Therefore, the ATK knows to put it in: code::../extensions/matrices/FOA/encoders::.

Had we specified a full path instead, it would have saved to that location.

code::
// Here are our encoders (defaults to showing the FOA set)
Atk.postMyMatrices('FOA', 'encoders');
::


SUBSECTION::Writing Metadata

Because this matrix encoder is somewhat unique, it would be helpful to provide a bit more information
about it for future reference. This is where the code::.yml:: file format comes in.

Note that the link::Classes/AtkMatrix#-writeToFile:: method has some optional
arguments: code::note:: and code::attributeDictionary::. A code::note:: can be a
brief description, while an code::attributeDictionary:: is a Dictionary for storing any
info you'd like in the form of key:value pairs.

code::
(
// A 'note': a description or note about the matrix.
~note = "This is a nine-point t-design encoder made for a matrix file writing demo.";

// A Dictionary of more metadata to add.
~properties =  (
	author: "Me, the Reader",
	dateCreated: Date.getDate.stamp,
	ordering: 'FuMa',
	normalisation: 'MaxN',
	dirInputs: ~directions
);
)
::

NOTE::
If keys in the strong::attributeDictionary:: match instance variables of FoaEncoderMatrix,
they can be retrieved with getters once loaded from the file. This is the case for
strong::dirInputs:: specified in the code::~properties:: dictionary above.
We'll see the effect this has below.
::

Now write this matrix and metadata to file...
Be sure to specify the code::.yml:: extension in order to write the metadata.
Set strong::overwrite:: code::= true:: to force overwrite the file we wrote before with
the same name and extension.

code::
(
~encoder.writeToFile( "my9PointEncoder.yml",
  note: ~note,
  attributeDictionary: ~properties,
  overwrite: true
)
)
::

SUBSECTION:: Subfolders: Organizing your matrices

If you'll be generating many matrices, it's advisable to organize your matrices into
subfolders. For example, if you're algorithmically generating hundreds of matrices
for a particular project or process, it makes sense to store them in a subfolder.

To do this, you can create subfolders inside your code::/encoders::, code::/decoders::,
and code::/xformers:: folders.

code::
// Store your encoder matrix with the other encoders, which live here:
Atk.getMatrixExtensionSubPath('FOA', 'encoders');

// You can make subfolder for a group of matrices, say, for a particular project:
(
~projSubFolderName = "myProject";

File.mkdir( Atk.getMatrixExtensionSubPath('FOA', 'encoders').fullPath +/+ ~projSubFolderName )
)

// For convenience, we'll write the 9-point ~encoder matrix,
// which we created above, to a new file in your new project folder.
// (We'll need to reset ~note and ~properties, as we clobbered them above!)
(

// A 'note': a description or note about the matrix.
~note = "This is a nine-point t-design encoder made for a matrix file writing demo.";

// A Dictionary of more metadata to add.
~properties =  (
    author: "Me, the Reader",
    dateCreated: Date.getDate.stamp,
    ordering: 'FuMa',
    normalisation: 'MaxN',
    dirInputs: ~directions
);

~encoder.writeToFile(~projSubFolderName +/+ "projectEncoder1.yml",
  note: ~note,
  attributeDictionary: ~properties
)
)
::

NOTE:: Remember that because code::~encoder:: is an link::Classes/FoaEncoderMatrix::,
the strong::set:: (code::'FOA'::) and strong::type:: (code::'encoder'::)
arguments are inferred.
::

code::
// There it is, in the 'myProject' subdirectory.
Atk.postMyMatrices('FOA', 'encoders')
::

Later you'll use link::Classes/FoaEncoderMatrix:: to read the file back in.
ATK will know where to look ( code::extensions/matrices/enocoders/FOA:: )
so you can simply specify the emphasis::relative:: path of your code::subfolder/file.yml:::

code::
~projectEncoder1 = FoaEncoderMatrix.newFromFile(~projSubFolderName +/+ "projectEncoder1.yml");

~projectEncoder1.info;
::

SECTION:: Reading Matrices

We wrote three encoder matrix files earlier. Let's now read them in.  As when writing,
the ATK looks in the strong::extensions/matrices:: directory by default. Unless
the matrix file is somewhere outside the default location, a filename
will suffice to read it in. The strong::type:: (code::'encoder'::, code::'decoder'::,
code::'xformer'::) is inferred from the object being instantiated.

We can even omit the file extension if we don't expect multiple file
emphasis::formats:: (code::.txt, .yml, .mosl.txt::) stored under the same emphasis::name:::

code::
~encoder = FoaEncoderMatrix.newFromFile("my9PointEncoder")
// >> ERROR: It sees we have more than one file with that name.
::

So, we'll need to specify the extension. As mentioned before, each file format
determines what kind of information is stored in the file.

Lets have a look at what each file format gives us back:

code::.txt:: format:
code::
// Reading the .txt file, we just get a matrix and basic info.
~encoder = FoaEncoderMatrix.newFromFile("my9PointEncoder.txt");

// All the standard instance vars are preserved.
~encoder.matrix;
~encoder.kind;          // Defaults to filename
~encoder.dirOutputs;    // Outputs are inf, becuase the output is b-format, i.e "all directions".
~encoder.dirInputs;     // With no metadata, we can't know input directions, so 'unspecified'
~encoder.dirInputs.size;// ...but knowing how large the array is tells us how many inputs the matrix expects
~encoder.dim;           // We see it's a 3-D matrix
::

code::.mosl.txt:: format:
code::
// reading the mosl.txt file, we just get a matrix and basic info
~encoder = FoaEncoderMatrix.newFromFile("my9PointEncoder.mosl.txt");

// all the standard instance vars are preserved
~encoder.matrix;
~encoder.kind;          // Defaults to filename
~encoder.dirOutputs;    // inf, by nature of encoding to b-format
~encoder.dirInputs;     // With no metadata, we can't know input directions
~encoder.dim;
::

code::.yml:: format:
code::
// reading the .yml file, we get the matrix plus metadata
~encoder = FoaEncoderMatrix.newFromFile("my9PointEncoder.yml");

// all the standard instance vars are preserved
~encoder.matrix;
~encoder.kind;
~encoder.dirOutputs;
~encoder.dim;

// NOTE: because we provided the 'dirInputs' to the attributeDictionary
// when we wrote it to file, we now have that info for reference. Useful!
~encoder.dirInputs;


// Plus the other data written to it:
~encoder.info;           // Formatted post

// Metadata is loaded as an IndentityDictionary, so values
// from the attributeDictionary can be accessed by their
// keys as pseudo-methods.
~encoder.fileParse;       // For direct access to the dictionary of values
~encoder.fileParse.note;  // What was this matrix again?? Oh yea...
~encoder.fileParse.ordering;
~encoder.fileParse.keysValuesDo{|k,v| postf("% : %\n", k, v)};
::


SUBSECTION:: Test case: Creating a decoder from an FoaEncoderMatrix

We've now instantiated a new code::~encoder:: by reading in the file that stored
the matrix that we originally built using the planewave encoder:
link::Classes/FoaEncoderMatrix#*newDirections:: (using the points of a nine-point t-design).
As it turns out, a matrix emphasis::encoder:: created by
link::Classes/FoaEncoderMatrix#*newDirections:: can be used to build
a emphasis::decoder:: of the same geometry. footnote::Recall
the ATK's matching A-format link::Classes/FoaEncoderMatrix#*newAtoB#encoders:: and
link::Classes/FoaDecoderMatrix#*newBtoA#decoders::!::
Doing so just involves performing the link::Classes/Matrix#-pseudoInverse:: on the
encoder's Matrix. footnote::This decoder design method is often described
as emphasis::pseudo-inverse:: or emphasis::mode-matching::.::

code::
// Retrieve the Matrix object stored in the FoaEncoderMatrix
// (Should be the 9-point t-design from above!)
~encoderMatrix = ~encoder.matrix;

// Perform the pseudoinverse on that matrix to find decoding coefficients
~decoderMatrix = ~encoderMatrix.pseudoInverse;
::

Using these coefficients will return a code::'velocity':: decode (aka "strict
soundfield" or "basic"). Loudspeakers should be positioned in the following
directions (and in this order):
code::
~encoder.dirInputs.do{|azElPairs, i| postf("chan %: %\n", i, azElPairs.raddeg) }
::


NOTE::
Because we're inverting an encoder to produce a decoder, the original
emphasis::input directions:: of the strong::encoder:: will now be the
emphasis::output directions:: of the strong::decoder::.
The channel ordering will be in the same order the input directions were
specified in the encoder. Therefore, in the above code we query the
emphasis::encoder:: for its  code::-dirInputs::  to know where our output channel
signals are expected to be sent (in space!).
::

It's important to note here that the code::~decoderMatrix:: matrix is a link::Classes/Matrix:: object,
not an link::Classes/FoaDecoderMatrix:: object.  As such, we'll need to use care when building
the decoding SynthDef.  Instead of using the link::Classes/FoaDecode:: UGen
(which expects an FoaDecoderMatrix or FoaDecoderKernel decoder),
we'll use the link::Classes/AtkMatrixMix:: UGen, which will decode our B-format
signal by using our newly authored decoding Matrix, code::~decoderMatrix::.

code::
(
~decoderDef = SynthDef(\pinv_decoder, { arg outbus=0, amp=1;
    var foa, out;

    // Test signal: panning noise
    foa = FoaPanB.ar( PinkNoise.ar, LFSaw.kr( 12.reciprocal, 1 ), 0 );

    // ~decoderMatrix is just a Matrix of decoding coefficients, so we use AtkMatrixMix
    out = AtkMatrixMix.ar(foa, ~decoderMatrix, amp);

    Out.ar(outbus, out);

}).load(Server.default);
)

~decoderSynth = Synth(\pinv_decoder, [\outbus, 0, \amp, -8.dbamp]);

// Scope the 9 channels of the decoded output
s.scope(9, 0);

// Clean up
~decoderSynth.free;
::
